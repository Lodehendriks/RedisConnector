// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package redisconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import redisconnector.impl.RedisConnector;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * HSET key field value
 * 
 * Sets field in the hash stored at key to value. If key does not exist, a new key holding a hash is created. If field already exists in the hash, it is overwritten.
 * 
 * Return value
 * Integer reply, specifically:
 * 1 if field is a new field in the hash and value was set.
 * 0 if field already exists in the hash and the value was updated.
 * 
 * Examples
 * redis> HSET myhash field1 "Hello"
 * (integer) 1
 * redis> HGET myhash field1
 * "Hello"
 * redis> 
 */
public class HSET extends CustomJavaAction<Long>
{
	private String Key;
	private String Field;
	private String Value;

	public HSET(IContext context, String Key, String Field, String Value)
	{
		super(context);
		this.Key = Key;
		this.Field = Field;
		this.Value = Value;
	}

	@Override
	public Long executeAction() throws Exception
	{
		// BEGIN USER CODE
		RedisConnector redisconnector = new RedisConnector(); 
		return redisconnector.hset(Key,Field,Value);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "HSET";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
